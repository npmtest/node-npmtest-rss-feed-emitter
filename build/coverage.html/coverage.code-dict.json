{"/home/travis/build/npmtest/node-npmtest-rss-feed-emitter/test.js":"/* istanbul instrument in package npmtest_rss_feed_emitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rss-feed-emitter/lib.npmtest_rss_feed_emitter.js":"/* istanbul instrument in package npmtest_rss_feed_emitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rss_feed_emitter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rss_feed_emitter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rss-feed-emitter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rss-feed-emitter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rss_feed_emitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rss_feed_emitter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rss_feed_emitter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rss_feed_emitter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rss_feed_emitter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rss_feed_emitter.__dirname + '/lib.npmtest_rss_feed_emitter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rss-feed-emitter/node_modules/rss-feed-emitter/dist/rss-feed-emitter.js":"'use strict';\n\n// TinyEmitter is a really nice Event Emitter. We will extend\n// our main class from it.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tinyEmitter = require('tiny-emitter');\n\nvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\nvar _lodash = require('lodash');\n\nvar _ = _interopRequireWildcard(_lodash);\n\nvar _request = require('request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _feedparser = require('feedparser');\n\nvar _feedparser2 = _interopRequireDefault(_feedparser);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Lodash is an utility library and makes life easy to work\n// and iterate over arrays, objects and manipulate values.\n\n\n// Request is one of the most popular modules there is to\n// make http requests.\n\n\n// Feedparser is the main choice if you want to parse\n// rss feeds in XML.\n\n\n// Bluebird empowers the default Promise with new\n// and amazing methods.\n\n\n// MAIN CLASS\n// This is where we extend from TinyEmitter and absorve\n// the #emit and #on methods to emit 'new-item' events\n// when we have new feed items.\nvar RssFeedEmitter = function (_TinyEmitter) {\n  _inherits(RssFeedEmitter, _TinyEmitter);\n\n  // The constructor special method is called everytime\n  // we create a new instance of this \"Class\".\n  function RssFeedEmitter() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, RssFeedEmitter);\n\n    // Also, we are creating a blank array to keep all\n    // our feed objects.\n    var _this = _possibleConstructorReturn(this, (RssFeedEmitter.__proto__ || Object.getPrototypeOf(RssFeedEmitter)).call(this));\n\n    // Since this is a \"Class\", you have to call #super method\n    // for the parent class initialize it's internals.\n\n\n    _this._feedList = [];\n\n    // If the user has specified a User Agent\n    // we will use that as the 'user-agent' header when\n    // making requests, otherwise we use the default option.\n    _this._userAgent = options.userAgent || 'Node/RssFeedEmitter (https://github.com/filipedeschamps/rss-feed-emitter)';\n\n    // This module manages automatically how many feed items\n    // it will keep in memory, and basically it will have a\n    // maximum history which is how many items the feed has\n    // multiplied by this number below. So, if the feed have\n    // 10 items, we will keep 30 items max in the history.\n    _this._historyLengthMultiplier = 3;\n\n    return _this;\n  }\n\n  // PUBLIC METHODS\n  // Now we are creating the public methods, these are the\n  // ones developers will use in their softwares.\n  // Remember: if you change a method signature in a way\n  // it's not backwards compatible, you created a breaking\n  // change, so design them very well.\n\n\n  // ADD\n  // The #add method is one of the main ones. Basically it\n  // receives one parameter with the feed options, for example:\n  // {\n  //   url: 'http://www.nintendolife.com/feeds/news',\n  //   refresh: 2000\n  // }\n\n  _createClass(RssFeedEmitter, [{\n    key: 'add',\n    value: function add(userFeedConfig) {\n\n      // We are going to use a private method to validate\n      // the feed object. If it's valid, everything is ok,\n      // otherwise it will throw an exception.\n      this._validateFeedObject(userFeedConfig);\n\n      // The developer doesn't need to specify the \"refresh\"\n      // property, for example, so this object have the default\n      // value.\n      var defaultFeedConfig = {\n        refresh: 60000\n      };\n\n      // With the #defaults method of Lodash, we can merge the user defined\n      // values with the default value we defined before.\n      var finalFeedConfig = _.defaults(userFeedConfig, defaultFeedConfig);\n\n      // This is a cool private method which will add this new feed if\n      // it doesn't exist in our feedList or if it does exist,\n      // we will update it.\n      this._addOrUpdateFeedList(finalFeedConfig);\n\n      // In the end, return the feedList to the developer.\n      return this._feedList;\n    }\n\n    // REMOVE\n    // This is a very simple method and its functionality is\n    // remove a feed from the feedList.\n\n  }, {\n    key: 'remove',\n    value: function remove(url) {\n\n      // Check if the \"url\" parameter is a string,\n      // otherwise throw.\n      if (typeof url !== 'string') {\n\n        throw {\n          type: 'type_error',\n          message: 'You must call #remove with a string containing the feed url'\n        };\n      }\n\n      // Try to find the feed object using the\n      // private method #_findFeed\n      var feed = this._findFeed({\n        url: url\n      });\n\n      // And then remove the feed object from\n      // the feedList.\n      return this._removeFromFeedList(feed);\n    }\n\n    // LIST\n    // Just return the feedList array.\n\n  }, {\n    key: 'list',\n    value: function list() {\n\n      return this._feedList;\n    }\n\n    // DESTROY\n    // Remove all feeds from feedList.\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n\n      // There's a gotcha here since we are iterating over an array\n      // while removing its properties. To do this, we have to use\n      // a little trick where you iterate backwards to not scramble\n      // the index while you're removing the properties.\n      for (var i = this._feedList.length - 1; i >= 0; i--) {\n\n        var feed = this._feedList[i];\n\n        this._removeFromFeedList(feed);\n      }\n    }\n\n    // PRIVATE METHODS\n    // These methods are not suposed to be used by the developer\n    // and you can change them without worrying about compatibilities\n    // of the public methods.\n\n    // This is used by the public method #add and will receive\n    // a feed object and check if all its properties are valid.\n    // If the validation you wan't to make is more complex, I\n    // recommend you to use a validation library.\n\n  }, {\n    key: '_validateFeedObject',\n    value: function _validateFeedObject(feed) {\n\n      if (!feed) {\n\n        throw {\n          type: 'type_error',\n          message: 'You must call #add method with a feed configuration object.'\n        };\n      }\n\n      if (!feed.url || typeof feed.url !== 'string' || feed.url === '') {\n\n        throw {\n          type: 'type_error',\n          message: 'Your configuration object should have an \"url\" key with a string value'\n        };\n      }\n\n      if (feed.refresh && typeof feed.refresh !== 'number') {\n\n        throw {\n          type: 'type_error',\n          message: 'Your configuration object should have a \"refresh\" key with a number value'\n        };\n      }\n    }\n\n    // This is also used by the public method #add and will\n    // add a new feed to feedList or update it if it's\n    // already in the list.\n\n  }, {\n    key: '_addOrUpdateFeedList',\n    value: function _addOrUpdateFeedList(feed) {\n\n      // First, try to find the feed in the feedList.\n      var feedInList = this._findFeed(feed);\n\n      // If there's a feed, remove it from the list,\n      // since we will add it later again.\n      if (feedInList) {\n\n        this._removeFromFeedList(feedInList);\n      }\n\n      // Now add the feed in the list.\n      return this._addToFeedList(feed);\n    }\n\n    // Very simple private method: given a feed object\n    // try to find it in the feedList using its \"url\".\n\n  }, {\n    key: '_findFeed',\n    value: function _findFeed(feed) {\n\n      return _.find(this._feedList, {\n        url: feed.url\n      });\n    }\n\n    // Given a feed and item, try to find\n    // it inside the feed item list. We will use\n    // this to see if there's already an item inside\n    // the feed item list. If there is, we know it's\n    // not a new item.\n\n  }, {\n    key: '_findItem',\n    value: function _findItem(feed, item) {\n\n      return _.find(feed.items, {\n        link: item.link,\n        title: item.title\n      });\n    }\n\n    // This is where we create the feed itself and\n    // add it to the feedList\n\n  }, {\n    key: '_addToFeedList',\n    value: function _addToFeedList(feed) {\n\n      // First, we add a blank array called \"items\"\n      // to the feed object. This is where we will keep the\n      // items history.\n      feed.items = [];\n\n      // After this, we will create a setInterval and\n      // keep a copy of its reference to be able\n      // to clean it later when we remove it.\n      // This interval will keep fetching the feed's\n      // url for new contents.\n      feed.setInterval = this._createSetInterval(feed);\n\n      // In the end, we need to push this object\n      // to the feedList array.\n      this._feedList.push(feed);\n    }\n\n    // This method is a little bit complex\n    // but also the most important one. It is\n    // responsible to keep fetching the RSS\n    // for content and emitting events\n    // when new items are found.\n\n  }, {\n    key: '_createSetInterval',\n    value: function _createSetInterval(feed) {\n\n      // First, lets keep the \"this\" reference.\n      var instance = this;\n\n      // The getContent function will:\n      //\n      // 1. call the _fetchFeed to get the content\n      //    from the RSS feed.\n      //\n      // 2. Locate the feed object inside the feedList.\n      //\n      // 3. Redefine the feed history length (using\n      //    the _historyLengthMultiplier variable.\n      //\n      // 4. Sort the received items by date so we always\n      //    work with the items in ascending order\n      //\n      // 5. Given the items received from the last fetch\n      //    and the current items in the feed item list,\n      //    select only the new ones.\n      //\n      // 6. Now take the new ones, push them to the\n      //    feed item list and emit while emitting events.\n      function getContent() {\n\n        instance._fetchFeed(feed.url).tap(findFeed).tap(redefineItemHistoryMaxLength).tap(sortItemsByDate).tap(identifyOnlyNewItems).tap(populateNewItemsInFeed).catch(function (error) {\n\n          // If this chain is iterating over a recently\n          // deleted feed, it will not be found in the\n          // feedList. If this happens, just ignore\n          // silently.\n          if (error.type === 'feed_not_found') {\n\n            return;\n          }\n\n          // Otherwise, emit an \"error\" event\n          instance.emit('error', error);\n        });\n\n        // 2. This happens after we got the results from\n        // the private method _fetchFeed. Basically we\n        // are going to receive a \"data\" object with\n        // the feed URL and the feed content.\n        function findFeed(data) {\n\n          // Try to find the feed object inside this instance\n          // using the feed url from the fetch.\n          var foundFeed = instance._findFeed({\n            url: data.feedUrl\n          });\n\n          // If nothing is found, probably we destroyed\n          // it in the middle of a fetch. Let's throw an\n          // error to get out of this Promise chain, since\n          // we can't keep going further.\n          if (!foundFeed) {\n\n            throw {\n              type: 'feed_not_found',\n              message: 'Feed not found.'\n            };\n          }\n\n          // If we found the feed, everything is ok and\n          // lets add it to the \"data\" object.\n          data.feed = foundFeed;\n        }\n\n        // Since we are managing the max history length,\n        // this is a good time to get the items length\n        // from the fetched feed, multiply it by the\n        // _historyLengthMultiplier and update the\n        // feed maxHistoryLength value. This is cool\n        // because if the source feed starts to increase\n        // or decrese its items quantity, we will ajust\n        // automatically how many items we keep in memory.\n        function redefineItemHistoryMaxLength(data) {\n\n          var feedLength = data.items.length;\n\n          data.feed.maxHistoryLength = feedLength * instance._historyLengthMultiplier;\n        }\n\n        // Sort all received items since we want to\n        // emit them in ascending order.\n        function sortItemsByDate(data) {\n\n          data.items = _.sortBy(data.items, 'date');\n        }\n\n        // Put all new items inside a \"newItems\" property\n        function identifyOnlyNewItems(data) {\n\n          // We can do this using the \"filter\" method of the array.\n          // The logic behind this is, if you return a \"false\" value,\n          // that item will be skipped, but if you return a \"true\"\n          // value, it will be added to the final array.\n          data.newItems = data.items.filter(function (fetchedItem) {\n\n            // So, try to find the suposed new item inside the current feed item list.\n            var foundItemInsideFeed = instance._findItem(data.feed, fetchedItem);\n\n            // If you found it, that item is not new, so skip it\n            // returning a false value.\n            if (foundItemInsideFeed) {\n\n              return false;\n            }\n\n            // But if we couldn't find it, this means it is a new item and we need\n            // to add it to the newItems array. To do this, just return a truthy value.\n            return fetchedItem;\n          });\n        }\n\n        // Now that we have all the new items, add them to the\n        // feed item list.\n        function populateNewItemsInFeed(data) {\n\n          data.newItems.forEach(function (item) {\n\n            instance._addItemToItemList(data.feed, item);\n          });\n        }\n      }\n\n      // Call the getContent function to already start getting\n      // content, otherwise you will have to wait for a\n      // setInterval cicle.\n      getContent();\n\n      // Create and return the setInterval itself.\n      return setInterval(getContent, feed.refresh);\n    }\n\n    // This is the inverse of the _addToFeedList method\n    // and we will destroy the setInterval and remove\n    // the feed from the feedList.\n\n  }, {\n    key: '_removeFromFeedList',\n    value: function _removeFromFeedList(feed) {\n\n      if (!feed) {\n\n        return;\n      }\n\n      clearInterval(feed.setInterval);\n      _.remove(this._feedList, { url: feed.url });\n    }\n\n    // Add a feed item to its item list.\n\n  }, {\n    key: '_addItemToItemList',\n    value: function _addItemToItemList(feed, item) {\n\n      // Push them to the items array.\n      feed.items.push(item);\n\n      // Keep the max history length in control.\n      feed.items = _.takeRight(feed.items, feed.maxHistoryLength);\n\n      // And emit the \"new-item\" event of this item.\n      this.emit('new-item', item);\n    }\n\n    // This is where the http request happens.\n\n  }, {\n    key: '_fetchFeed',\n    value: function _fetchFeed(feedUrl) {\n      var _this2 = this;\n\n      // Remember the above Promise chain? Everything starts here.\n      return new _bluebird2.default(function (resolve, reject) {\n\n        // Create a FeedParser instance.\n        var feedparser = new _feedparser2.default();\n\n        // Create that \"data\" object we used over and over inside\n        // the getContent Promise chain. It starts with a feed url\n        // property and a blank item array.\n        var data = {\n          feedUrl: feedUrl,\n          items: []\n        };\n\n        // Now let's request that feed URL sending a very nice header\n        // because some servers doesn't like requests without it.\n        _request2.default.get({\n          url: feedUrl,\n          headers: {\n            'user-agent': _this2._userAgent,\n            'accept': 'text/html,application/xhtml+xml,application/xml'\n          }\n        })\n        // Run this once we get a response from the server.\n        .on('response', requestOnResponse)\n        // If the request is rejected, call this function.\n        .on('error', requestOnError)\n        // If everything is ok, let's parse the feed.\n        .pipe(feedparser)\n        // and in the end, let's call the finish function.\n        .on('end', finish);\n\n        // Basically what we do here is, if we doesn't get a \"200\" status\n        // code from the request, reject the promise because probably we\n        // received something like a \"404\" or \"500\" error.\n        function requestOnResponse(res) {\n\n          var statusOk = 200;\n\n          if (res.statusCode !== statusOk) {\n\n            var error = {\n              type: 'fetch_url_error',\n              message: 'This URL returned a ' + res.statusCode + ' status code',\n              feed: feedUrl\n            };\n\n            reject(error);\n          }\n        }\n\n        // This will happen when Node.js itself couldn't connet\n        // to the host to get something from it.\n        function requestOnError(responseError) {\n\n          if (responseError.code === 'ENOTFOUND') {\n\n            var error = {\n              type: 'fetch_url_error',\n              message: 'Cannot connect to ' + feedUrl,\n              feed: feedUrl\n\n            };\n\n            reject(error);\n          }\n        }\n\n        // Everytime the Feedparser emits a \"readable\" event\n        // we have a new feed item, so we need to add it to the\n        // data.item list.\n        feedparser.on('readable', function () {\n\n          // Read the item itself.\n          var item = feedparser.read();\n\n          // Force the feed URL inside the feed item because\n          // some times the RSS doesn't have the feed url inside\n          // every item.\n          item.meta.link = feedUrl;\n\n          // Add to the data.items.\n          data.items.push(item);\n        });\n\n        // Feedparser will also emit an \"error\" event\n        // if it's not able to parse the XML. If this\n        // happens, we need to interrupt the Promise chain\n        // since we can't keep going further.\n        feedparser.on('error', function () {\n\n          var error = {\n            type: 'invalid_feed',\n            message: 'Cannot parse ' + feedUrl + ' XML',\n            feed: feedUrl\n\n          };\n\n          reject(error);\n        });\n\n        // Once finished, let's resolve the Promise\n        // with the \"data\" object.\n        function finish() {\n\n          resolve(data);\n        }\n      });\n    }\n  }]);\n\n  return RssFeedEmitter;\n}(_tinyEmitter2.default);\n\n// In the end, just export the RssFeedEmitter class.\n\n\nexports.default = RssFeedEmitter;\nmodule.exports = exports['default'];"}